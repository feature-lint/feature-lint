"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[527],{7522:function(e,t,n){n.d(t,{Zo:function(){return s},kt:function(){return d}});var a=n(9901);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var u=a.createContext({}),l=function(e){var t=a.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},s=function(e){var t=l(e.components);return a.createElement(u.Provider,{value:t},e.children)},f={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,u=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),p=l(n),d=r,g=p["".concat(u,".").concat(d)]||p[d]||f[d]||i;return n?a.createElement(g,o(o({ref:t},s),{},{components:n})):a.createElement(g,o({ref:t},s))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=p;var c={};for(var u in t)hasOwnProperty.call(t,u)&&(c[u]=t[u]);c.originalType=e,c.mdxType="string"==typeof e?e:r,o[1]=c;for(var l=2;l<i;l++)o[l]=n[l];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},3982:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return c},contentTitle:function(){return u},metadata:function(){return l},toc:function(){return s},default:function(){return p}});var a=n(5499),r=n(1805),i=(n(9901),n(7522)),o=["components"],c={sidebar_position:3},u="Declaring a Feature",l={unversionedId:"configuration/declaring-feature",id:"configuration/declaring-feature",isDocsHomePage:!1,title:"Declaring a Feature",description:"After creating a configuration file, the first thing you may want to do, is to declare the specified feature-types.",source:"@site/docs/configuration/declaring-feature.md",sourceDirName:"configuration",slug:"/configuration/declaring-feature",permalink:"/feature-lint/configuration/declaring-feature",editUrl:"https://github.com/feature-lint/feature-lint/docs/configuration/declaring-feature.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Configuration File",permalink:"/feature-lint/configuration/create-configuration"},next:{title:"Declaring a Building Block",permalink:"/feature-lint/configuration/declaring-buildingblock"}},s=[{value:"Make Feature-lint aware",id:"make-feature-lint-aware",children:[{value:"Option 1: Adding a name matcher for features",id:"option-1-adding-a-name-matcher-for-features",children:[]},{value:"Option 2: Declaring a feature using .feature.jsonc",id:"option-2-declaring-a-feature-using-featurejsonc",children:[]}]}],f={toc:s};function p(e){var t=e.components,n=(0,r.Z)(e,o);return(0,i.kt)("wrapper",(0,a.Z)({},f,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"declaring-a-feature"},"Declaring a Feature"),(0,i.kt)("p",null,"After creating a configuration file, the first thing you may want to do, is to declare the specified feature-types.\nYou can specify ",(0,i.kt)("strong",{parentName:"p"},"feature-types")," by adding a `featureTypes attribute to the root configuration."),(0,i.kt)("p",null,"For the following, imagine the following project structure."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"package.json\nsrc/\n  react-foo\n  react-bar\n  react-baz\n  vue-foo\n  domain-abc\n")),(0,i.kt)("p",null,"I this case, the project may consist of some features beeing implemented by react(react-), some by vue(vue), and some containing\npure javascript logic (domain). The first thing to do, is to delcare these feature types.\nTo create a feature-type, a attribute ",(0,i.kt)("strong",{parentName:"p"},"featureTypes")," has to be added to the root config. This object contains\ndifferent keys, corresponding to the name, the feature-type shall have. Following the example from above,\nthe following configuration gets created."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "$schema": "https://raw.githubusercontent.com/feature-lint/feature-lint/pages/schema/feature-lint-v0.0.15.schema.json"\n  "rootDir": "./src",\n  "featureTypes": {\n    "react": { // This line was added\n      \n    },\n    "vue": { // This line was added\n\n    },\n    "angular": { // This line was added\n\n    },\n    "domain": { // This line was added\n\n    }\n  }\n}\n')),(0,i.kt)("p",null,"This tells feature-lint, that there are essentially three types of possible feature-types: react, angular and domain."),(0,i.kt)("h2",{id:"make-feature-lint-aware"},"Make Feature-lint aware"),(0,i.kt)("p",null,"The next step to do is, to tell that feature-lint which folder is of which feature-type. Therefore two ways exist:"),(0,i.kt)("h3",{id:"option-1-adding-a-name-matcher-for-features"},"Option 1: Adding a name matcher for features"),(0,i.kt)("p",null,"By adding a ",(0,i.kt)("inlineCode",{parentName:"p"},"featureNameMatcher"),"-attribute to the declared feature-type it is possible to make feature-lint infer the\nfeature-type of a folder based on its name.\nThe ",(0,i.kt)("inlineCode",{parentName:"p"},"featureNameMatcher"),"-attribute takes an RegExpression to determine the feature type. Using this approach,\nthe resulting configuration file may look like the following:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "$schema": "https://raw.githubusercontent.com/feature-lint/feature-lint/pages/schema/feature-lint-v0.0.15.schema.json"\n  "rootDir": "./src",\n  "featureTypes": {\n    "react": { \n      "featureNameMatcher": "react-.*" // This line was added\n    },\n    "angular": { \n      "featureNameMatcher": "angular-.*" // This line was added\n    },\n    "domain": { \n      "featureNameMatcher": "domain-.*"// This line was added\n    }\n  }\n}\n')),(0,i.kt)("h3",{id:"option-2-declaring-a-feature-using-featurejsonc"},"Option 2: Declaring a feature using .feature.jsonc"),(0,i.kt)("p",null,"This option requires the file tree to add a file named ",(0,i.kt)("inlineCode",{parentName:"p"},".feature.jsonc")," to each folder inside the project."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"package.json\nsrc/\n  react-foo/\n    .feature.jsonc\n  react-bar/\n     .feature.jsonc\n  react-baz/\n     .feature.jsonc\n  angular-foo/\n     .feature.jsonc\n  domain-abc/ \n     .feature.jsonc\n")),(0,i.kt)("p",null,"This file may contain the information of the feature-type. The content of such file looks like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "$schema": "../../../../../../packages/schema/dist/feature.schema.json",\n\n  "featureType": "react"\n}\n')),(0,i.kt)("p",null,"To get a full view of rules, which exist please consult ",(0,i.kt)("a",{parentName:"p",href:"/feature-lint/configuration/declaring-rules"},"the rules document")))}p.isMDXComponent=!0}}]);