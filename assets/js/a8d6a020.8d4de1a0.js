"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[174],{7522:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return d}});var r=t(9901);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=r.createContext({}),c=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},u=function(e){var n=c(e.components);return r.createElement(s.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),m=c(t),d=i,f=m["".concat(s,".").concat(d)]||m[d]||p[d]||a;return t?r.createElement(f,o(o({ref:n},u),{},{components:t})):r.createElement(f,o({ref:n},u))}));function d(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,o=new Array(a);o[0]=m;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var c=2;c<a;c++)o[c]=t[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},1695:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return c},toc:function(){return u},default:function(){return m}});var r=t(5499),i=t(1805),a=(t(9901),t(7522)),o=["components"],l={sidebar_position:1},s="Dependencies",c={unversionedId:"configuration/rules/dependencies",id:"configuration/rules/dependencies",isDocsHomePage:!1,title:"Dependencies",description:"A vital rule to ensure architectural decisions are beeing conformed with, is the dependency rule. With the dependency",source:"@site/docs/configuration/rules/dependencies.md",sourceDirName:"configuration/rules",slug:"/configuration/rules/dependencies",permalink:"/feature-lint/configuration/rules/dependencies",editUrl:"https://github.com/feature-lint/feature-lint/docs/configuration/rules/dependencies.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Declaring Rules",permalink:"/feature-lint/configuration/declaring-rules"},next:{title:"Ensure Name",permalink:"/feature-lint/configuration/rules/ensureName"}},u=[{value:"Reasoning",id:"reasoning",children:[]},{value:"Implementation",id:"implementation",children:[{value:"BuildingBlock Dependencies",id:"buildingblock-dependencies",children:[]},{value:"Feature-types example",id:"feature-types-example",children:[]}]}],p={toc:u};function m(e){var n=e.components,t=(0,i.Z)(e,o);return(0,a.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"dependencies"},"Dependencies"),(0,a.kt)("p",null,"A vital rule to ensure architectural decisions are beeing conformed with, is the dependency rule. With the dependency\nrule it is possible to specify which features may import which building blocks and what building blocks may import other\nbuilding blocks from other features."),(0,a.kt)("h2",{id:"reasoning"},"Reasoning"),(0,a.kt)("p",null,"From an architectural perspective it is essential to keep track of the dependencies and ensure that dependency rules are\nnot broken, which features or building-blocks may have. Therefore we provide a ",(0,a.kt)("strong",{parentName:"p"},"dependencies")," rule, which gets applied\nto features and building-blocks and ensures that no illegal imports are made."),(0,a.kt)("h2",{id:"implementation"},"Implementation"),(0,a.kt)("p",null,"To configure the rules for building blocks, a small micro-syntax is available. This Syntax includes"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"*")," matches every other building-block or feature"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"@")," prefixes building-block names."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},":")," prefixes feature-types names."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"&")," matches this building block"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"!")," negates the expression")),(0,a.kt)("p",null,"The general expression therefore is\n",(0,a.kt)("inlineCode",{parentName:"p"},"$feature:$featureType@$bb"),"\nWhere this expression means: in this feature there exists a featureType, which may import bb from exactly\nthis feature-type. This match is allowed (Unless there is ",(0,a.kt)("inlineCode",{parentName:"p"},"!")," before the expression)."),(0,a.kt)("h3",{id:"buildingblock-dependencies"},"BuildingBlock Dependencies"),(0,a.kt)("p",null,"Image the following structure:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "$schema": "https://raw.githubusercontent.com/feature-lint/feature-lint/pages/schema/feature-lint-v0.0.15.schema.json",\n  "rootDir": "./src/features",\n  "featureTypes": {\n    "domain": {\n      "featureNameMatcher": "domain-.*",\n      "buildingBlocks": {\n        "storage-technology": {},\n        "business-logic": {}\n      }\n    }\n  }\n}\n')),(0,a.kt)("p",null,"Problem Statement: You want to ensure, that the ",(0,a.kt)("inlineCode",{parentName:"p"},"storage-technology")," cannot import anything from other BBs.\nThis means in no typescript file inside the ",(0,a.kt)("inlineCode",{parentName:"p"},"storage-technology")," folder shall have an ",(0,a.kt)("inlineCode",{parentName:"p"},"import from '../business-logic'"),"\nstatement."),(0,a.kt)("p",null,"The corresponding expression would be:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "buildingBlocks": {\n    "storage-technology": {\n      "rules": [\n        {\n          "name": "dependencies",\n          "criteria": [\n            // Shall not allow any import at all\n            "!*",\n            // But: inside the same feature-type (":&")\n            // we can import other files from the BB ("@storage-technology")\n            ":&@storage-technology"\n          ]\n        }\n      ]\n    },\n    "business-logic": {\n      "rules": [\n        {\n          "name": "dependencies",\n          "criteria": [\n            // Shall allow no import from other BBs at all\n            // * means all BBs, ! negates the expression.\n            "!*",\n            // but: we can import storage-technology building-block\n            "@storage-technology"\n          ]\n        }\n      ]\n    }\n  }\n}\n')),(0,a.kt)("p",null,"The rules therefore are additive."),(0,a.kt)("h3",{id:"feature-types-example"},"Feature-types example"),(0,a.kt)("p",null,"There are also usecases, where building-blocks may import other building-blocks from specifc\nfeature-types."),(0,a.kt)("p",null,"Problem statement:\nWe have a react-feature-type and a domain-feature-type. react-components may import models from\na domain-feature-type. We therefore maybe have a configuration like the following."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "$schema": "https://raw.githubusercontent.com/feature-lint/feature-lint/pages/schema/feature-lint-v0.0.15.schema.json",\n  "rootDir": "./src/features",\n  "featureTypes": {\n    "react": {\n      "components": {}\n    },\n    "domain": {\n      "buildingBlocks": {\n        "models": {},\n        "do-not-import-from-react": {}\n      }\n    }\n  }\n}\n')),(0,a.kt)("p",null,"We now want to ensure, that react-component can only import ",(0,a.kt)("inlineCode",{parentName:"p"},"models")," from domain-features."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "buildingBlocks": {\n    "react": {\n      "components": {\n        "rules": [\n          {\n            "name": "dependencies",\n            "criteria": [\n              // disallow all imports\n              "!*",\n              // but allow imports with the following matching criteria\n              // ":domain": match all bbs from domain-feature-type\n              // "@model": enable model import\n              ":domain@models"\n            ]\n          }\n        ]\n      }\n    },\n    "domain": {\n      // ...\n    }\n  }\n}\n')))}m.isMDXComponent=!0}}]);